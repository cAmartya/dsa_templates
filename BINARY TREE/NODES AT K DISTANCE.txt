	

	void subTree(Node* root, int k, vector<int>& res) {
        
        if(!root || k<0)
            return;
        
        if(k == 0)  {
            res.push_back(root-> data);
            // cout << root-> data << " ";
            return;
        }
        
        subTree(root-> left, k-1, res);
        subTree(root-> right, k-1, res);
        
        return;
    }
    
    int printNodes(Node* root, int target , int k, vector<int>& res)    {
        
        if(!root)   {
            return -1;
        }
        if(root-> data == target)  {
            // cout << root-> data << "T ";
            subTree(root, k, res);
            return 0;
        }
        
        int dl = printNodes(root-> left, target, k, res);
        if(dl != -1)    {
            if(k == 1+dl) {
                res.push_back(root-> data);
            }else   {
                subTree(root-> right, k-dl-2, res);
            }
            
            return dl+1;
        }
        
        int dr = printNodes(root-> right, target, k, res);
        if(dr != -1)    {
            if(k == 1+dr) {
                res.push_back(root-> data);
            }else   {
                subTree(root-> left, k-dr-2, res);
            }
            
            return dr+1;
        }
        
        
        
        return -1;
    }
    
    vector <int> KDistanceNodes(Node* root, int target , int k)
    {
        // return the sorted vector of all nodes at k dist
        vector<int> res;
        int d = printNodes(root, target, k, res);
        sort(res.begin(), res.end());
        
        return res;
        
    }

