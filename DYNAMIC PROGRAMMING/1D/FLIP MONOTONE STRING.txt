class Solution {
public:
    int rec(int i, int next, string& s, vector<vector<int>>& dp) {
        if(i == -1) return 0;
        if(dp[i][next] != -1) return dp[i][next];
        int f, nf;
        if(next == 1) {
            if(s[i] == '1') {
                f = rec(i-1, 0, s, dp) +1;
                nf = rec(i-1, 1, s, dp);
            }else {
                f = rec(i-1, 1, s, dp) +1;
                nf = rec(i-1, 0, s, dp);
            }
        }else {        
            if(s[i] == '1') {
                f = rec(i-1, 0, s, dp) +1;
                nf = INT_MAX;
            }else {
                f = INT_MAX;
                nf = rec(i-1, 0, s, dp);
            }
        }
        return dp[i][next] = min(f, nf);
    }
    int minFlipsMonoIncr(string s) {
        int n = s.length();
        vector<vector<int>> dp(n+1, vector<int> (2, 0));
        // return min(rec(n-1, 1, s, dp), rec(n-1, 0, s, dp));
        for(int i=1; i<=n; i++) {
            if(s[i-1] == '1') {
                dp[i][1] = min(dp[i-1][0] +1, dp[i-1][1]);
                dp[i][0] = dp[i-1][0] +1;                
            }else {
                dp[i][1] = min(dp[i-1][1] +1, dp[i-1][0]);
                dp[i][0] = dp[i-1][0];
            }
        }        
        
        return min(dp[n][0], dp[n][1]);
    }
};