int solve(int d, int prev, vector<vector<int>> &points)    {    
    int lg=0;
    if(d==0)    {        
        for(int i=0; i<3; i++)    {
            if(i == prev)    continue;
            lg = max(lg, points[d][i]);
        }
        return lg;
    }
    for(int i=0; i<3; i++)    {
        if(i == prev)    continue;
        lg = max(lg, solve(d-1, i, points) +points[d][i]);
    }
    
    return lg;    
}

int ninjaTraining(int n, vector<vector<int>> &points)
{
    // Write your code here.
//     return solve(n-1, 3,points);
//     int k = 3;
//     int dp[n][k+1];
//     for(int i=0; i<=k; i++)    {
//         int lg=0;
//         for(int j=0; j<k; j++)    {
//             if(j == i)    continue;
//             lg = max(points[0][j], lg);
//         }
//         dp[0][i] = lg;
//     }
//     for(int i=1; i<n; i++)    {
//         for(int j=0; j<=k; j++)    {
//             int lg=0;    
//             for(int x=0; x<k; x++)    {
//                 if(j == x)    continue;
//                 lg = max(lg, dp[i-1][x] +points[i][x]); 
//             }
//             dp[i][j] = lg;            
//         }
//     }    
//     return dp[n-1][k];
    
//     space optimization
    int k = 3;
    int dp[2][k+1];
    for(int i=0; i<=k; i++)    {
        int lg=0;
        for(int j=0; j<k; j++)    {
            if(j == i)    continue;
            lg = max(points[0][j], lg);
        }
        dp[0][i] = lg;
    }
    for(int i=1; i<n; i++)    {
        for(int j=0; j<=k; j++)    {
            int lg=0;    
            for(int x=0; x<k; x++)    {
                if(j == x)    continue;
                lg = max(lg, dp[0][x] +points[i][x]); 
            }
            dp[1][j] = lg;            
        }
        for(int j=0; j<=k; j++)    {
            dp[0][j] = dp[1][j];
        }
    }
    
    return dp[0][k];
}