    int LIS(vector<int>& nums, int idx, int prevIdx)    {
        if(idx == nums.size())  {
            return 0;
        }
        
        int noTake = LIS(nums, idx+1, prevIdx) +0;
        int take = INT_MIN;
        if(prevIdx == -1 || nums[idx]>nums[prevIdx])    {
            take = LIS(nums, idx+1, idx) +1;
        }
        return max(noTake, take);
    }
    int lengthOfLIS(vector<int>& nums) {
        
        // return LIS(nums, 0, -1);
        
//         int n = nums.size();
//         vector<int> dp(n, 1);
        
//         for(int i=0; i<n; i++)  {
//             for(int j= i-1; j>=0; j--)  {
//                 if(nums[j] < nums[i])   dp[i] = max(dp[i], dp[j] +1);
//             }
//         }
//         int ans=0;
//         for(int i: dp)  {
//             ans = max(ans, i);
//         }
        
//         return ans;
        int n= nums.size();
        vector<int> temp;
        temp.push_back(nums[0]);
        int len = 1;
        
        for(int i=1; i<n; i++)  {
            if(temp[len -1] < nums[i])  {
                temp.push_back(nums[i]);
                ++len;
            }else   {
                auto idx = lower_bound(temp.begin(), temp.end(), nums[i]);
                *idx = nums[i];
            }
        }
        return len;
    }

        
       