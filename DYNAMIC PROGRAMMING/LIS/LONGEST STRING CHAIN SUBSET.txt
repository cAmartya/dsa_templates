    bool comp(string a, string b)   {
        int n = a.length(), m = b.length(); 
        if (n != m +1)  return false;
        int i=0, j=0;
        while(i<n)   {
            if(a[i] == b[j])    {
                j++;
            }
            i++;
        }
        return i == j+1;
    }
    int longestStrChain(vector<string>& words) {
        
        sort(words.begin(), words.end(), [](string a, string b) {            
            return a.length() < b.length();
        });
        int n = words.size();
        vector<int> dp(n, 1);
        for(int i=1; i<n; i++)  {
            for(int j=i-1; j>=0; j--)   {
                if(comp(words[i], words[j]))    {
                    dp[i] = max(dp[i], dp[j] +1);
                }
            }
        }
        int ans = 0;
        for(int i: dp)  {
            ans = max(ans, i);
        }
        return ans;
    }