    vector<int> largestDivisibleSubset(vector<int>& nums) {
                
        int n = nums.size();
        sort(nums.begin(), nums.end());
        vector<int> dp(n, 1);
        vector<int> hash(n);        
        int maxIdx=0;
        for(int i=0; i<n; i++)  {
            hash[i] = i;
            for(int j= i-1; j>=0; j--)  {
                if(nums[i] % nums[j] == 0 && dp[j] +1 > dp[i])  {
                    dp[i] = dp[j] +1;
                    hash[i] = j;
                }   
            }
            if(dp[i] > dp[maxIdx])  {
                maxIdx = i;
            }
        }
        vector<int> res;
        while(maxIdx != hash[maxIdx]) {
            res.push_back(nums[maxIdx]);
            maxIdx = hash[maxIdx];
        }
        res.push_back(nums[maxIdx]);
        reverse(res.begin(), res.end());
        return res;
    }