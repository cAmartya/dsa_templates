    int solve(int i, int j, vector<int>& arr)   {
        if(i>j) return 0;
        
        int ans = INT_MAX;
        for(int k=i; k<=j; k++)  {
            int v = (arr[j+1]-arr[i-1]) + solve(i, k-1, arr) + solve(k+1, j, arr);
            ans = min(ans, v);
        }
        
        return ans;
    }
    int minCost(int n, vector<int>& cuts) {
        int c = cuts.size();
        sort(cuts.begin(), cuts.end());
        cuts.insert(cuts.begin(), 0);
        cuts.push_back(n);
        
        // return solve(1, c, cuts);
        
        vector<vector<int>> dp(c+3, vector<int>(c+1, 0));
        for(int i=c; i>=1; i--) {
            for(int j=1; j<=c; j++) {
                if(i>j)    continue;
                int ans = INT_MAX;
                for(int k=i; k<=j; k++)  {
                    int v = (cuts[j+1]-cuts[i-1]) + dp[i][k-1] + dp[k+1][j];
                    ans = min(ans, v);
                }
                dp[i][j] = ans;
            }
        }
        return dp[1][c];
    }