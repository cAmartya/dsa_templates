    int solve(int idx, int buy, int cap, vector<int>& prices, vector<vector<vector<int>>>& dp) {
        if(idx == prices.size() || cap == 0)    return 0;
        
        if(dp[idx][buy][cap] != -1) return dp[idx][buy][cap];
        
        int take=0, notake=0;
        if(buy) {
            take = -prices[idx] + solve(idx+1, 0, cap, prices, dp);
            notake = solve(idx+1, 1, cap, prices, dp);
        }else   {
            take = prices[idx] + solve(idx+1, 1, cap-1, prices, dp);
            notake = solve(idx+1, 0, cap, prices, dp);
        }
        
        return dp[idx][buy][cap] = max(take, notake);
    }
    int maxProfit(vector<int>& prices) {
        int n = prices.size();
        int k = 2;
        // vector<vector<vector<int>>> dp(n+1, vector<vector<int>> (2, vector<int> (k+1, -1)));
        // return solve(0, 1, k, prices, dp);
        
        vector<vector<int>> curr(2, vector<int> (k+1, 0));
        vector<vector<int>> after(2, vector<int> (k+1, 0));
        
        for(int idx=n-1; idx>=0; idx--)   {
            for(int buy=0; buy<2; buy++)    {
                for(int cap=1; cap<3; cap++)    {
                    int take=0, notake=0;
                    if(buy) {
                        take = -prices[idx] + after[0][cap];
                        notake = after[1][cap];
                    }else   {
                        take = prices[idx] + after[1][cap-1];
                        notake = after[0][cap];
                    }
                    curr[buy][cap] = max(take, notake);
                }
            }
            after = curr;
        }
        
        return after[1][k];
    }