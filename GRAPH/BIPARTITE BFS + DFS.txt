    bool bfs(int i, vector<bool>& vis, vector<bool>& color, vector<int>adj[])  {
	    queue<int> q;
	    q.push(i);
	    while(!q.empty())   {
	        int curr = q.front();
	        q.pop();
	        for(int it: adj[curr])  {
	            if(!vis[it])    {
	                q.push(it);
	                vis[it] = 1;
	                color[it] = color [curr] ^ 1;
	            }else   {
	                if(color[it] == color[curr])    return false;
	            }
	        }
	    }
	    
	    return true;
    }
    bool dfs(int curr, vector<bool>& vis, vector<bool>& color, vector<int>adj[])  {
        vis[curr] = 1;
        for(int it: adj[curr]) {
            if(!vis[it])    {
                color[it] = color [curr] ^ 1;
                if(!dfs(it, vis, color, adj))    return false;
            }else   {
                if(color[it] == color[curr])    return false;
            }
        }
        return true;
    }
	bool isBipartite(int v, vector<int>adj[]){
	    // Code here
	    vector<bool> vis(v, 0);
	    vector<bool> color(v, 0);
	    for(int i=0; i<v; i++)  {
	        if(!vis[i]) {
	            if(!bfs(i, vis, color, adj)) return false;
	            // if(!dfs(i, vis, color, adj)) return false;
	        }
	    }
	    
	    return true;
	}