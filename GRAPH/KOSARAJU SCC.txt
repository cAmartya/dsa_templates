void dfs(int curr, vector<int> adj[], stack<int>& s, vector<bool>& vis)   {
	    vis[curr] = 1;
	    for(int it: adj[curr])   {
	        if(!vis[it])
	            dfs(it, adj, s, vis);
	    }
	    s.push(curr);
	}
	void dfs(int curr, vector<vector<int>>& g, vector<bool>& vis)   {
	    vis[curr] = 1;
	    for(int it: g[curr])   {
	        if(!vis[it])
	            dfs(it, g, vis);
	    }
	}
	vector<int> topoSort(int v, vector<int> adj[]) 
	{
	    // code here
	    stack<int> s;
	    vector<int> res;
	    vector<bool> vis(v+1, 0);
	    for(int i=0; i<v; i++)  {
	        if(!vis[i])
	            dfs(i, adj, s, vis);
	    }
	    
	    while(!s.empty())   {
	        res.push_back(s.top());
	        s.pop();
	    }
	    
	    return res;
	}
	vector<vector<int>> transpose(int n, vector<int> adj[])    {
	    vector<vector<int>> g(n+1);
	    
	    for(int i=0; i<n; i++)  {
	        for(int it: adj[i]) {
	            g[it].push_back(i);
	        }
	    }
	    
	    return g;
	}
	//Function to find number of strongly connected components in the graph.
    int kosaraju(int v, vector<int> adj[])
    {
        //code here
        vector<int> top_sort = topoSort(v, adj);
        vector<vector<int>> g = transpose(v, adj);
        
        vector<bool> vis(v+1, 0);
        int c=0;
        for(int i=0; i<v; i++)  {
	        if(!vis[top_sort[i]]) {
	            ++c;
	            dfs(top_sort[i], g, vis);
	        }
	    }
        
        return c;
    }