    vector<pair<int, int>> moves = {{0,1}, {1,0}, {0,-1}, {-1,0}};
    bool isVal(int x, int y, int r, int c)    {
        return x>=0 && x<r && y>=0 && y<c;
    }
    int orangesRotting(vector<vector<int>>& grid) {
        // Code here
        queue<pair<int, int>> q;
	    int r = grid.size();
	    int c = grid[0].size();
	    vector<vector<int>> d(r, vector<int>(c, -1));
	    vector<vector<bool>> vis(r, vector<bool>(c, 0));
	    
	    for(int i=0; i<r; i++)  {
	        for(int j=0; j<c; j++)  {
	            if(grid[i][j] == 2) {
	                q.push({i, j});
	                vis[i][j] = 1;
	                d[i][j] += 1;
	            }
	        }
	    }
	    int ans = -1;
	    while(!q.empty())   {
	        int par_x = q.front().first;
	        int par_y = q.front().second;
	        q.pop();
	        
	        for(auto move: moves)   {
	            int child_x = par_x + move.first;
	            int child_y = par_y + move.second;
	            if(!isVal(child_x, child_y, r, c))  continue;
	            if(vis[child_x][child_y])   continue;
	            vis[child_x][child_y] = 1;
	            if(!grid[child_x][child_y]) continue;
	            
	            q.push({child_x, child_y});
	            d[child_x][child_y] = d[par_x][par_y] + 1;
	            ans = max(d[child_x][child_y], ans);
	        }
	    }
	    
	    for(int i=0; i<r; i++)  {
	        for(int j=0; j<c; j++)  {
	            if(grid[i][j] == 1 && d[i][j] == -1) {
	                return -1;
	            }
	        }
	    }
	    
	    return ans;
    }