vector<pair<int, int>> adj[100+1];  //{w, v}
    int findCheapestPrice(int n, vector<vector<int>>& fl, int src, int dst, int k) {
        
        for(auto i: fl) {
            adj[i[0]].push_back({i[2], i[1]});
        }

        vector<int> dis(n+1, 1e+9);        
        vector<int> stops(n+1, 1e+9);

        priority_queue<tii, vector<tii>, greater<tii>> pq;
        pq.push(make_tuple(0, src, 0));
        dis[src] = 0;
        stops[src] = 0;
        while(!pq.empty())  {
            auto [w, u, stp] = pq.top();
            pq.pop();
            if(dst == u)    return w;
            if(stp > k)  continue;
            int nk = stp+1;
            for(auto it : adj[u])   {
                int d = w + it.first;
                int v = it.second;
                if(d < dis[v]) {
                    dis[v] = d;
                    stops[v] = nk;
                    pq.push(make_tuple(d, v, nk));
                }else if(nk < stops[v]) {                    
                    pq.push(make_tuple(d, v, nk));
                }
            }
        }
        return -1;
    }