typedef long long ll;
typedef pair<ll, ll> pii;
#define ff first
#define ss second
class Solution {
public:
    vector<ll> djk(int& src, vector<vector<pii>>& adj, int& n) {
        priority_queue<pii, vector<pii>, greater<pii>> pq;
        pq.push({0, src});
        vector<ll> d(n, 1e+17);
        d[src] = 0;
        while(!pq.empty()) {
            ll c = pq.top().ff;
            ll u = pq.top().ss; 
            pq.pop();
            if(c > d[u]) continue;
            for(auto i: adj[u]) {
                ll dist = d[u] + (ll)i.ff;
                if(dist < d[i.ss]) {
                    d[i.ss] = dist;
                    pq.push({dist ,i.ss});
                }
            }
        }
        
        return d;
    }
    long long minimumWeight(int& n, vector<vector<int>>& edges, int src1, int src2, int dest) {
        vector<vector<pii>> adj(n);        
        vector<vector<pii>> radj(n);
        for(auto e: edges) {
            adj[e[0]].push_back({e[2], e[1]});
            radj[e[1]].push_back({e[2], e[0]});
        }
        
        vector<ll> d1=djk(src1, adj, n);
        vector<ll> d2=djk(src2, adj, n);
        vector<ll> d3=djk(dest, radj, n);
        ll res=1e+17;
        for(int i=0; i<n; i++) {
            if(d1[i]==1e+17 || d2[i]==1e+17 || d3[i]==1e+17) continue;
            res = min(res, d1[i]+d2[i]+d3[i]);
        }
        
        return (res>=1e+17) ? -1 : res;
    }
};