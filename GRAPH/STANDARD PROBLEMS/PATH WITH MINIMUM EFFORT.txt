class Solution {
public:
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, -1, 0, 1};
    bool dfs(int x, int y, int& k, vector<vector<bool>>& vis, vector<vector<int>>& h, int& n, int& m) {
        if(x==n-1 && y==m-1) {
            return true;
        }
        
        vis[x][y] = 1;         
        for(int i=0; i<4; i++) {
            int nx = x+dx[i], ny=y+dy[i];
            if(nx<0 || nx>=n || ny<0 || ny>=m) continue;
            if(vis[nx][ny] == 1) continue;
            int d = abs(h[x][y]-h[nx][ny]);
            if(d <= k)
                if(dfs(nx, ny, k, vis, h, n, m) == true)
                    return true;
        }
        return false;
    }
    int minimumEffortPath(vector<vector<int>>& h) {
        int n = h.size();
        int m = h[0].size();
        vector<vector<bool>> vis;
        
        int l=0, r=1e+6;
        while(l<=r) {
            vis.assign(n, vector<bool> (m, 0));
            int mid = l + (r-l)/2;
            if(dfs(0, 0, mid, vis, h, n, m)) {
                r=mid-1;
            } else {
              l = mid+1;  
            }
        }
        
        return l;        
    }
};