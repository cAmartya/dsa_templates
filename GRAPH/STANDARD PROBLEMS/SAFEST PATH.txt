typedef pair<int, int> pii;
typedef pair<int, pii> pp;
class Solution {
public:
    int di[4] = {-1, 0, 1, 0};
    int dj[4] = {0, -1, 0, 1};
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        int n = grid.size();
        if(grid[0][0] || grid[n-1][n-1]) return 0;
        queue<pii> q;
        vector<vector<int>> d(n, vector<int>(n, 1e+5));
        vector<vector<bool>> vis(n, vector<bool>(n, 0));
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                if(grid[i][j]) {
                    q.push({i, j});
                    d[i][j] = 0;
                }
            }
        }
        
        // floodfill to find closest distance of thief from every cell
        while(!q.empty()) {
            int i=q.front().first;
            int j=q.front().second;
            q.pop();
            
            int dis = d[i][j]+1;
            for(int p=0; p<4; p++) {
                int ni=i+di[p], nj=j+dj[p];
                if(ni<0 || ni>=n || nj<0 || nj>=n || dis>=d[ni][nj]) continue;
                d[ni][nj] = dis;
                q.push({ni, nj});
            }
        }
         
        // dijkstra to find the safest path
        priority_queue<pp> pq;
        pq.push({d[0][0], {0, 0}});
        while(!pq.empty()) {
            int c = pq.top().first;
            int i=pq.top().second.first;
            int j=pq.top().second.second;
            pq.pop();
            if(vis[i][j]) continue;
            vis[i][j]=1;
            
            if(i==n-1 && j==n-1) return c;
            for(int p=0; p<4; p++) {
                int ni=i+di[p], nj=j+dj[p];
                if(ni<0 || ni>=n || nj<0 || nj>=n || vis[ni][nj]) continue;
                
                pq.push({min(d[ni][nj], c), {ni, nj}});
            }
        }
        return 0;
    }
};