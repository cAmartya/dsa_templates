    int findPlatform(int arr[], int dep[], int n)
    {
    // 	vector<vector<int>> v;
    // 	for(int i=0; i<n; i++)  {
    // 	    v.push_back({arr[i], dep[i]});
    // 	}
    // 	sort(v.begin(), v.end(), [](vector<int> a, vector<int> b)   {
    // 	    return a[0]<b[0];
    // 	});
    // 	priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
    // 	int plat=0;
    // 	for(int i=0; i<n; i++)  {
    // 	    if(pq.empty() || pq.top().first >= v[i][0])  {
    // 	        pq.push(make_pair(v[i][1], v[i][0]));
    // 	        plat =max(plat, (int)pq.size());
    // 	       //++plat;
    // 	    }else   {
    // 	        pq.pop();
    // 	        pq.push(make_pair(v[i][1], v[i][0]));
    // 	    }
    // 	}
    // 	return plat;
    	
    	sort(arr, arr+n);
    	sort(dep, dep+n);
    	
    	int i=0, j=1, plat=1;
    	while(j<n)  {
    	    if(dep[i] >= arr[j]) {
    	        ++plat;
    	    }else   {
    	        ++i;
    	    }
    	    ++j;
    	}
    	
    	return plat;
    }