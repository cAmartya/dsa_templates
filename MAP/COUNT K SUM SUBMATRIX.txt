    int subarraySum(vector<int>& nums, int k) {
        unordered_map<int, int> mp;
        int n = nums.size();
        int s = 0;
        int cnt=0;
        for(int i=0; i<n; i++)  {
            s += nums[i];
            if(s == k)    {
                ++cnt;
            }
            if(mp.find(s-k) != mp.end())  {
                cnt += mp[s-k];
            }
            mp[s] += 1;
        }
        return cnt;
    }
    int numSubmatrixSumTarget(vector<vector<int>>& mat, int target) {
        int r = mat.size() , c = mat[0].size();        
       
        int cnt=0;
        for(int srow = 0; srow<r; srow++)   {
            vector<int> rowSum(c, 0);
            for(int i=srow; i<r; i++)  {
                for(int j=0; j<c; j++)  {
                    rowSum[j] += mat[i][j];
                }
                cnt += subarraySum(rowSum, target);
            }
        }
        
        return cnt;
    }