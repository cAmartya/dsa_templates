    public:
    // vector<vector<int>> moves = {{1, 0}, {0, 1}, {-1, 0}, {0, -1}};
    // vector<char> dir = {'D', 'R', 'U', 'L'};
    
    void solve(vector<vector<int>>& m, int& n, int i, int j, string s, vector<string>& res, vector<vector<bool>>& vis)    {
        if(i<0 || i>=n || j<0 || j>=n)  {
            return;
        }
        if(vis[i][j] || !m[i][j])   {
            return;
        }
        
        if(i == n-1 && j == n-1)    {
            res.push_back(s);
        }
        vis[i][j] = 1;
        
        solve(m, n, i+1, j, s + 'D', res, vis);
        solve(m, n, i, j+1, s + 'R', res, vis);
        solve(m, n, i-1, j, s + 'U', res, vis);
        solve(m, n, i, j-1, s + 'L', res, vis);
        
        vis[i][j] = 0;
        
        // not working
        // for(int idx=0; i<4; i++)  {
        //     solve(m, n, i+moves[idx][0], j+moves[idx][1], s + dir[idx], res, vis);
            
        //     vis[i][j] = 0;
        // }
    }
    vector<string> findPath(vector<vector<int>> &m, int n) {
        // Your code goes here
        vector<string> res;
        if(!m[0][0] || !m[n-1][n-1])    return res;
        vector<vector<bool>> vis(n, vector<bool> (n, 0));
        solve(m, n, 0, 0, "", res, vis);
        
        sort(res.begin(), res.end());
        return res;
    }