    void merge(vector<int>& arr, vector<int>& count, int l, int m, int r, vector<pair<int,int>>& v)
    {
        vector<pair<int,int>> temp(r-l+1);
        int i = l;
        int j= m + 1;
        int k = 0;
        
        while(i<=m && j<=r){                                                    
            if(v[i].first<=v[j].first) temp[k++] = v[j++];
            else{
                count[v[i].second] += r-j+1;
                temp[k++] = v[i++];
            }
        }
        
        while(i<=m){
            temp[k++] = v[i++];
        }
        while(j<=r){
            temp[k++] = v[j++];
        }
        
        for(int i=l;i<=r;i++){
            v[i] = temp[i-l];
        }
    }
    
    void mergesort(vector<int>& nums, vector<int>& count, int l, int r, vector<pair<int,int>>& v) {
        if(l<r) {
            int m = l + (r-l)/2;
            mergesort(nums, count, l, m, v);
            mergesort(nums, count, m+1, r, v);
            
            merge(nums, count, l, m, r, v);
        }
    }
    vector<int> countSmaller(vector<int>& nums) {
        int n = nums.size();
        vector<pair<int,int>> v(n);                                        
        for(int i=0;i<n;i++) v[i] = {nums[i],i};
        vector<int> count(n,0);                                             
        mergesort(nums,count,0,n-1,v);
        return count;
    }