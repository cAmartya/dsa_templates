    int MAH(int arr[], int n)   {
        stack<pair<int, int>> s;
        vector<int> nsl(n, 0);
        
        for(int i=0; i<n; i++)   {
            
            while(!s.empty() && s.top().first >= arr[i])  {
                s.pop();
            }
            if(s.empty())   {
                nsl[i] = -1;
            }else   {
                nsl[i] = s.top().second;
            }
            
            s.push({arr[i], i});
        }
        
        while(!s.empty())   s.pop();
        
        vector<int> nsr(n, 0);
        
        for(int i=n-1; i>=0; i--)   {
            
            while(!s.empty() && s.top().first >= arr[i])  {
                s.pop();
            }
            if(s.empty())   {
                nsr[i] = n;
            }else   {
                nsr[i] = s.top().second;
            }
            
            s.push({arr[i], i});
        }
        int ans = INT_MIN;
        
        for(int i=0; i<n; i++)  {
            ans = max(ans, (nsr[i]-nsl[i]-1)*arr[i]);
        }
        return ans;        
    }
    
    int maxArea(int mat[MAX][MAX], int n, int m) {
        // Your code here
        int ans = 0;
        for(int i=0; i<n; i++)  {
            
            int res = MAH(mat[i], m);
            ans = max(ans, res);
            for(int j=0; j<m; j++)  {
                if(mat[i+1][j] != 0)
                    mat[i+1][j] += mat[i][j];
                // cout << mat[i][j];
            }
            // cout << "\n";
        }
        
        return ans;
    }
};