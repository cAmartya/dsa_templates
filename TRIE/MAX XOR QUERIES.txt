#include<bits/stdc++.h>
class Node    {
    Node* next[2];
    public:
    void put(int bit, Node* node)    {
        next[bit] = node;
    }
    Node* get(int bit)    {
        return next[bit];
    }
    bool contains(int bit)    {
        return next[bit] != NULL;
    }
};
class Trie    {
    Node* root;
    public:
    Trie()    {
        root = new Node();        
    }
    void insert(int x)    {
        Node* it = root;
        for(int i=31; i>=0; i--)    {
            bool v = (x >> i) & 1;
            if(!it-> contains(v))    {
                it-> put(v, new Node());
            }
            it = it-> get(v);
        }
    }   
    int xorMax(int num)    {
        Node* it = root;
        int ans = 0;
        for(int i=31; i>=0; i--)    {
            bool v = (num >> i) & 1;
            if(it-> contains(v^1))    {
                ans = ans | (1 << i);
                it = it-> get(v^1);
            }else    {
                it = it-> get(v);
            }
        }
        
        return ans;
    }
};
vector<int> maxXorQueries(vector<int> &arr, vector<vector<int>> &q){
    
    int idx=0;
    for(auto &i: q)    {
        i.push_back(idx++);
    };
    sort(arr.begin(), arr.end());
    sort(q.begin(), q.end(), [](vector<int> a, vector<int> b)    {
        return a[1] < b[1];
    });
    
    int n = arr.size();
    vector<int> res(q.size());
    
    idx=0;
    Trie* trie = new Trie();
    for(auto i: q)    {
        while(arr[idx] <= i[1] && idx<n)    {
            trie-> insert(arr[idx]);
            ++idx;
        }
        if(idx>0)
            res[i[2]] = trie-> xorMax(i[0]);
        else
            res[i[2]] = -1;
    }
    
    return res;
}