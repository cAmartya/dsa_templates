
class Node    {
    Node* next[2];
    public:
    void put(int bit, Node* node)    {
        next[bit] = node;
    }
    Node* get(int bit)    {
        return next[bit];
    }
    bool contains(int bit)    {
        return next[bit] != NULL;
    }
};
class Trie    {
    Node* root;
    public:
    Trie()    {
        root = new Node();        
    }
    void insert(int x)    {
        Node* it = root;
        for(int i=31; i>=0; i--)    {
            bool v = (x >> i) & 1;
            if(!it-> contains(v))    {
                it-> put(v, new Node());
            }
            it = it-> get(v);
        }
    }   
    int xorMax(int num)    {
        Node* it = root;
        int ans = 0;
        for(int i=31; i>=0; i--)    {
            bool v = (num >> i) & 1;
            if(it-> contains(v^1))    {
                ans = ans | (1 << i);
                it = it-> get(v^1);
            }else    {
                it = it-> get(v);
            }
        }
        
        return ans;
    }
};
int maxXOR(int n, int m, vector<int> &arr1, vector<int> &arr2) 
{
    Trie* trie = new Trie();
    for(int i: arr1)    {
        trie-> insert(i);
    }
    int ans=0;
    for(int i: arr2)    {
        int v = trie-> xorMax(i);
        ans = max(ans, v);
    }
    return ans;
}